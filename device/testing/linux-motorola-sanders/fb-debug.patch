diff --git a/drivers/video/fbdev/core/fbmem.c b/drivers/video/fbdev/core/fbmem.c
index 4bb5d68189a0..003330c6fe62 100644
--- a/drivers/video/fbdev/core/fbmem.c
+++ b/drivers/video/fbdev/core/fbmem.c
@@ -954,27 +954,37 @@ fb_set_var(struct fb_info *info, struct fb_var_screeninfo *var)
 	int flags = info->flags;
 	int ret = 0;
 
+	printk(KERN_ERR "PMOS DEBUG: !!!!!!!! fb_set_var !!!!!!!!\n");
 	if (var->activate & FB_ACTIVATE_INV_MODE) {
 		struct fb_videomode mode1, mode2;
 
+		printk(KERN_ERR "PMOS DEBUG: !!!!!!!! FB_ACTIVATE_INV_MODE !!!!!!!!\\n");
 		fb_var_to_videomode(&mode1, var);
 		fb_var_to_videomode(&mode2, &info->var);
 		/* make sure we don't delete the videomode of current var */
+		printk(KERN_ERR "PMOS DEBUG: calling fb_mode_is_equal...\n");
 		ret = fb_mode_is_equal(&mode1, &mode2);
+		printk(KERN_ERR "PMOS DEBUG: after fb_mode_is_equal, ret is %d\n", ret);
 
 		if (!ret) {
 		    struct fb_event event;
 
 		    event.info = info;
 		    event.data = &mode1;
+			printk(KERN_ERR "PMOS DEBUG: calling fb_notifier_call_chain...\n");
 		    ret = fb_notifier_call_chain(FB_EVENT_MODE_DELETE, &event);
+			printk(KERN_ERR "PMOS DEBUG: after fb_notifier_call_chain, ret is %d\n", ret);
 		}
 
-		if (!ret)
+		if (!ret) {
+			printk(KERN_ERR "PMOS DEBUG: calling fb_delete_videomode...\n");
 		    fb_delete_videomode(&mode1, &info->modelist);
+			printk(KERN_ERR "PMOS DEBUG: after fb_delete_videomode, ret is %d\n", ret);
+		}
 
-
+		printk(KERN_ERR "PMOS DEBUG: from FB_ACTIVATE_INV_MODE, before EINVAL, ret is %d\n", ret);
 		ret = (ret) ? -EINVAL : 0;
+		printk(KERN_ERR "PMOS DEBUG: from FB_ACTIVATE_INV_MODE, after EINVAL, ret is %d\n", ret);
 		goto done;
 	}
 
@@ -982,9 +992,11 @@ fb_set_var(struct fb_info *info, struct fb_var_screeninfo *var)
 	    memcmp(&info->var, var, sizeof(struct fb_var_screeninfo))) {
 		u32 activate = var->activate;
 
+		printk(KERN_ERR "PMOS DEBUG: !!!!!!!! FB_ACTIVATE_FORCE !!!!!!!!\\n");
 		/* When using FOURCC mode, make sure the red, green, blue and
 		 * transp fields are set to 0.
 		 */
+		printk(KERN_ERR "PMOS DEBUG: checking capabilities...\n");
 		if ((info->fix.capabilities & FB_CAP_FOURCC) &&
 		    var->grayscale > 1) {
 			if (var->red.offset     || var->green.offset    ||
@@ -992,16 +1004,22 @@ fb_set_var(struct fb_info *info, struct fb_var_screeninfo *var)
 			    var->red.length     || var->green.length    ||
 			    var->blue.length    || var->transp.length   ||
 			    var->red.msb_right  || var->green.msb_right ||
-			    var->blue.msb_right || var->transp.msb_right)
+			    var->blue.msb_right || var->transp.msb_right) {
+				printk(KERN_ERR "PMOS DEBUG: capabilities check failed!\n");
 				return -EINVAL;
+			}
 		}
 
+		printk(KERN_ERR "PMOS DEBUG: checking fb_check_var...\n");
 		if (!info->fbops->fb_check_var) {
 			*var = info->var;
+			printk(KERN_ERR "PMOS DEBUG: exiting after fb_check_var!\n");
 			goto done;
 		}
 
+		printk(KERN_ERR "PMOS DEBUG: calling fb_check_var...\n");
 		ret = info->fbops->fb_check_var(var, info);
+		printk(KERN_ERR "PMOS DEBUG: after fb_check_var, ret is %d\n", ret);
 
 		if (ret)
 			goto done;
@@ -1010,8 +1028,12 @@ fb_set_var(struct fb_info *info, struct fb_var_screeninfo *var)
 			struct fb_var_screeninfo old_var;
 			struct fb_videomode mode;
 
+			printk(KERN_ERR "PMOS DEBUG: !!!!!!!! FB_ACTIVATE_NOW !!!!!!!!\\n");
+			printk(KERN_ERR "PMOS DEBUG: checking fb_get_caps...\n");
 			if (info->fbops->fb_get_caps) {
+				printk(KERN_ERR "PMOS DEBUG: calling fb_check_caps...\n");
 				ret = fb_check_caps(info, var, activate);
+				printk(KERN_ERR "PMOS DEBUG: after fb_check_caps, ret is %d\n", ret);
 
 				if (ret)
 					goto done;
@@ -1020,8 +1042,11 @@ fb_set_var(struct fb_info *info, struct fb_var_screeninfo *var)
 			old_var = info->var;
 			info->var = *var;
 
+			printk(KERN_ERR "PMOS DEBUG: checking fb_set_par...\n");
 			if (info->fbops->fb_set_par) {
+				printk(KERN_ERR "PMOS DEBUG: calling fb_set_par...\n");
 				ret = info->fbops->fb_set_par(info);
+				printk(KERN_ERR "PMOS DEBUG: after fb_set_par, ret is %d\n", ret);
 
 				if (ret) {
 					info->var = old_var;
@@ -1032,13 +1057,19 @@ fb_set_var(struct fb_info *info, struct fb_var_screeninfo *var)
 				}
 			}
 
+			printk(KERN_ERR "PMOS DEBUG: calling fb_pan_display...\n");
 			fb_pan_display(info, &info->var);
+			printk(KERN_ERR "PMOS DEBUG: calling fb_set_cmap...\n");
 			fb_set_cmap(&info->cmap, info);
+			printk(KERN_ERR "PMOS DEBUG: calling fb_var_to_videomode...\n");
 			fb_var_to_videomode(&mode, &info->var);
 
 			if (info->modelist.prev && info->modelist.next &&
-			    !list_empty(&info->modelist))
+			    !list_empty(&info->modelist)) {
+				printk(KERN_ERR "PMOS DEBUG: calling fb_add_videomode...\n");
 				ret = fb_add_videomode(&mode, &info->modelist);
+				printk(KERN_ERR "PMOS DEBUG: after fb_add_videomode, ret is %d\n", ret);
+			}
 
 			if (!ret && (flags & FBINFO_MISC_USEREVENT)) {
 				struct fb_event event;
@@ -1046,6 +1077,7 @@ fb_set_var(struct fb_info *info, struct fb_var_screeninfo *var)
 					FB_EVENT_MODE_CHANGE_ALL :
 					FB_EVENT_MODE_CHANGE;
 
+				printk(KERN_ERR "PMOS DEBUG: activating new mode...\n");
 				info->flags &= ~FBINFO_MISC_USEREVENT;
 				event.info = info;
 				event.data = &mode;
@@ -1121,20 +1153,37 @@ static long do_fb_ioctl(struct fb_info *info, unsigned int cmd,
 		ret = copy_to_user(argp, &var, sizeof(var)) ? -EFAULT : 0;
 		break;
 	case FBIOPUT_VSCREENINFO:
-		if (copy_from_user(&var, argp, sizeof(var)))
+		printk(KERN_ERR "PMOS DEBUG: !!!!!!!! FBIOPUT_VSCREENINFO !!!!!!!!\n");
+		printk(KERN_ERR "PMOS DEBUG: calling copy_from_user...\n");
+		if (copy_from_user(&var, argp, sizeof(var))) {
+			printk(KERN_ERR "PMOS DEBUG: copy_from_user failed!\n");
 			return -EFAULT;
+		}
+		printk(KERN_ERR "PMOS DEBUG: locking console...\n");
 		console_lock();
+		printk(KERN_ERR "PMOS DEBUG: locking fb info...\n");
 		if (!lock_fb_info(info)) {
+			printk(KERN_ERR "PMOS DEBUG: locking fb info failed!\n");
 			console_unlock();
 			return -ENODEV;
 		}
+		printk(KERN_ERR "PMOS DEBUG: setting vars to fb...\n");
 		info->flags |= FBINFO_MISC_USEREVENT;
 		ret = fb_set_var(info, &var);
 		info->flags &= ~FBINFO_MISC_USEREVENT;
+		printk(KERN_ERR "PMOS DEBUG: set vars to fb, ret is %ld\n", ret);
 		unlock_fb_info(info);
 		console_unlock();
-		if (!ret && copy_to_user(argp, &var, sizeof(var)))
+		if (ret) {
+			printk(KERN_ERR "PMOS DEBUG: breaking due to ret is %ld\n", ret);
+			break;
+		}
+		printk(KERN_ERR "PMOS DEBUG: calling copy_to_user...\n");
+		if (copy_to_user(argp, &var, sizeof(var))) {
+			printk(KERN_ERR "PMOS DEBUG: copy_to_user failed!\n");
 			ret = -EFAULT;
+		}
+		printk(KERN_ERR "PMOS DEBUG: copy_to_user success!\n");
 		break;
 	case FBIOGET_FSCREENINFO:
 		if (!lock_fb_info(info))
diff --git a/drivers/video/fbdev/msm/msm_fb.c b/drivers/video/fbdev/msm/msm_fb.c
index 2979d7e72126..e18f5de5c994 100644
--- a/drivers/video/fbdev/msm/msm_fb.c
+++ b/drivers/video/fbdev/msm/msm_fb.c
@@ -323,6 +323,7 @@ error:
 
 static int msmfb_check_var(struct fb_var_screeninfo *var, struct fb_info *info)
 {
+#if 0
 	if ((var->xres != info->var.xres) ||
 	    (var->yres != info->var.yres) ||
 	    (var->xres_virtual != info->var.xres_virtual) ||
@@ -331,6 +332,35 @@ static int msmfb_check_var(struct fb_var_screeninfo *var, struct fb_info *info)
 	    (var->bits_per_pixel != info->var.bits_per_pixel) ||
 	    (var->grayscale != info->var.grayscale))
 		 return -EINVAL;
+#endif
+	if (var->xres != info->var.xres) {
+		printk(KERN_ERR "PMOS DEBUG: xres mismatch: %u != %u\n", var->xres, info->var.xres);
+		return -EINVAL;
+	}
+	if (var->yres != info->var.yres) {
+		printk(KERN_ERR "PMOS DEBUG: yres mismatch: %u != %u\n", var->yres, info->var.yres);
+		return -EINVAL;
+	}
+	if (var->xres_virtual != info->var.xres_virtual) {
+		printk(KERN_ERR "PMOS DEBUG: xres_virtual mismatch: %u != %u\n", var->xres_virtual, info->var.xres_virtual);
+		return -EINVAL;
+	}
+	if (var->yres_virtual != info->var.yres_virtual) {
+		printk(KERN_ERR "PMOS DEBUG: yres_virtual mismatch: %u != %u\n", var->yres_virtual, info->var.yres_virtual);
+		return -EINVAL;
+	}
+	if (var->xoffset != info->var.xoffset) {
+		printk(KERN_ERR "PMOS DEBUG: xoffset mismatch: %u != %u\n", var->xoffset, info->var.xoffset);
+		return -EINVAL;
+	}
+	if (var->bits_per_pixel != info->var.bits_per_pixel) {
+		printk(KERN_ERR "PMOS DEBUG: bits_per_pixel mismatch: %u != %u\n", var->bits_per_pixel, info->var.bits_per_pixel);
+		return -EINVAL;
+	}
+	if (var->grayscale != info->var.grayscale) {
+		printk(KERN_ERR "PMOS DEBUG: grayscale mismatch: %u != %u\n", var->grayscale, info->var.grayscale);
+		return -EINVAL;
+	}
 	return 0;
 }
 
diff --git a/drivers/video/msm/mdss/mdss_fb.c b/drivers/video/msm/mdss/mdss_fb.c
index 3fd1d2659b69..e6f67b3ac59f 100644
--- a/drivers/video/msm/mdss/mdss_fb.c
+++ b/drivers/video/msm/mdss/mdss_fb.c
@@ -4118,9 +4118,24 @@ static int mdss_fb_check_var(struct fb_var_screeninfo *var,
 {
 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)info->par;
 
-	if (var->rotate != FB_ROTATE_UR && var->rotate != FB_ROTATE_UD)
+	printk(KERN_ERR "PMOS DEBUG: !!!!!!!! mdss_fb_check_var !!!!!!!!\n");
+	if (var->rotate != FB_ROTATE_UR && var->rotate != FB_ROTATE_UD) {
+		printk(KERN_ERR "PMOS DEBUG: var->rotate bad value: %u\n", var->rotate);
 		return -EINVAL;
+	}
 
+	printk(KERN_ERR "PMOS DEBUG: bits_per_pixel: %u\n", var->bits_per_pixel);
+	printk(KERN_ERR "PMOS DEBUG: transp.offset:  %u\n", var->transp.offset);
+	printk(KERN_ERR "PMOS DEBUG: red.offset:     %u\n", var->red.offset);
+	printk(KERN_ERR "PMOS DEBUG: green.offset:   %u\n", var->green.offset);
+	printk(KERN_ERR "PMOS DEBUG: blue.offset:    %u\n", var->blue.offset);
+	printk(KERN_ERR "PMOS DEBUG: transp.length:  %u\n", var->transp.length);
+	printk(KERN_ERR "PMOS DEBUG: red.length:     %u\n", var->red.length);
+	printk(KERN_ERR "PMOS DEBUG: green.length:   %u\n", var->green.length);
+	printk(KERN_ERR "PMOS DEBUG: blue.length:    %u\n", var->blue.length);
+	printk(KERN_ERR "PMOS DEBUG: red.msb_right:  %u\n", var->red.msb_right);
+	printk(KERN_ERR "PMOS DEBUG: green.msb_right:%u\n", var->green.msb_right);
+	printk(KERN_ERR "PMOS DEBUG: blue.msb_right: %u\n", var->blue.msb_right);
 	switch (var->bits_per_pixel) {
 	case 16:
 		if ((var->green.offset != 5) ||
@@ -4135,8 +4150,10 @@ static int mdss_fb_check_var(struct fb_var_screeninfo *var,
 		    (var->green.msb_right != 0) ||
 		    (var->red.msb_right != 0) ||
 		    (var->transp.offset != 0) ||
-		    (var->transp.length != 0))
+		    (var->transp.length != 0)) {
+			printk(KERN_ERR "PMOS DEBUG: bad values for 16 bpp\n");
 			return -EINVAL;
+		}
 		break;
 
 	case 24:
@@ -4152,8 +4169,10 @@ static int mdss_fb_check_var(struct fb_var_screeninfo *var,
 		    !(((var->transp.offset == 0) &&
 		       (var->transp.length == 0)) ||
 		      ((var->transp.offset == 24) &&
-		       (var->transp.length == 8))))
+		       (var->transp.length == 8)))) {
+			printk(KERN_ERR "PMOS DEBUG: bad values for 24 bpp\n");
 			return -EINVAL;
+		}
 		break;
 
 	case 32:
@@ -4171,8 +4190,10 @@ static int mdss_fb_check_var(struct fb_var_screeninfo *var,
 		    !((var->transp.offset == 24) &&
 			(var->blue.offset == 16) &&
 			(var->green.offset == 8) &&
-			(var->red.offset == 0)))
-				return -EINVAL;
+			(var->red.offset == 0))) {
+			printk(KERN_ERR "PMOS DEBUG: bad offset values for 32 bpp\n");
+			return -EINVAL;
+		}
 
 		/* Check the common values for both RGBA and ARGB */
 
@@ -4182,8 +4203,10 @@ static int mdss_fb_check_var(struct fb_var_screeninfo *var,
 		    (var->transp.length != 8) ||
 		    (var->blue.msb_right != 0) ||
 		    (var->green.msb_right != 0) ||
-		    (var->red.msb_right != 0))
+		    (var->red.msb_right != 0)){
+			printk(KERN_ERR "PMOS DEBUG: bad common values for 32 bpp\n");
 			return -EINVAL;
+		}
 
 		break;
 
@@ -4191,45 +4214,69 @@ static int mdss_fb_check_var(struct fb_var_screeninfo *var,
 		return -EINVAL;
 	}
 
-	if ((var->xres_virtual <= 0) || (var->yres_virtual <= 0))
+	if ((var->xres_virtual <= 0) || (var->yres_virtual <= 0)) {
+		printk(KERN_ERR "PMOS DEBUG: bad xres_virtual or yres_virtual: %u, %u\n", var->xres_virtual, var->yres_virtual);
 		return -EINVAL;
+	}
 
-	if ((var->xres == 0) || (var->yres == 0))
+	if ((var->xres == 0) || (var->yres == 0)) {
+		printk(KERN_ERR "PMOS DEBUG: bad xres or yres: %u, %u\n", var->xres, var->yres);
 		return -EINVAL;
+	}
 
-	if (var->xoffset > (var->xres_virtual - var->xres))
+	if (var->xoffset > (var->xres_virtual - var->xres)) {
+		printk(KERN_ERR "PMOS DEBUG: bad xoffset: %u > %u - %u\n", var->xoffset, var->xres_virtual, var->xres);
 		return -EINVAL;
+	}
 
-	if (var->yoffset > (var->yres_virtual - var->yres))
+	if (var->yoffset > (var->yres_virtual - var->yres)) {
+		printk(KERN_ERR "PMOS DEBUG: bad yoffset: %u > %u - %u\n", var->yoffset, var->yres_virtual, var->yres);
 		return -EINVAL;
+	}
 
+	printk(KERN_ERR "PMOS DEBUG: checking info->mode...\n");
 	if (info->mode) {
 		const struct fb_videomode *mode;
 
+		printk(KERN_ERR "PMOS DEBUG: info->mode exists!\n");
+		printk(KERN_ERR "PMOS DEBUG: calling fb_match_mode...\n");
 		mode = fb_match_mode(var, &info->modelist);
-		if (mode == NULL)
+		if (mode == NULL) {
+			printk(KERN_ERR "PMOS DEBUG: fb_match_mode failure!\n");
 			return -EINVAL;
+		}
+		printk(KERN_ERR "PMOS DEBUG: fb_match_mode success!\n");
 	} else if (mfd->panel_info && !(var->activate & FB_ACTIVATE_TEST)) {
 		struct mdss_panel_info *panel_info;
 		int rc;
+		printk(KERN_ERR "PMOS DEBUG: info->mode not exist!\n");
+		printk(KERN_ERR "PMOS DEBUG: allocating panel_info...\n");
 		panel_info = kzalloc(sizeof(struct mdss_panel_info),
 				GFP_KERNEL);
 		if (!panel_info)
 			return -ENOMEM;
 
+		printk(KERN_ERR "PMOS DEBUG: allocated panel_info!\n");
+		printk(KERN_ERR "PMOS DEBUG: copying panel_info...\n");
 		memcpy(panel_info, mfd->panel_info,
 				sizeof(struct mdss_panel_info));
 		mdss_fb_var_to_panelinfo(var, panel_info);
+		printk(KERN_ERR "PMOS DEBUG: copied panel_info!\n");
+		printk(KERN_ERR "PMOS DEBUG: calling mdss_fb_send_panel_event...\n");
 		rc = mdss_fb_send_panel_event(mfd, MDSS_EVENT_CHECK_PARAMS,
 			panel_info);
+		printk(KERN_ERR "PMOS DEBUG: after mdss_fb_send_panel_event, rc is %d\n", rc);
 		if (IS_ERR_VALUE(rc)) {
+			printk(KERN_ERR "PMOS DEBUG: rc is bad, returning %d!\n", rc);
 			kfree(panel_info);
 			return rc;
 		}
+		printk(KERN_ERR "PMOS DEBUG: rc is good, storing %d!\n", rc);
 		mfd->panel_reconfig = rc;
 		kfree(panel_info);
 	}
 
+	printk(KERN_ERR "PMOS DEBUG: mdss_fb_check_var success!\n");
 	return 0;
 }
 
